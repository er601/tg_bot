from config import bot
from aiogram import types, Dispatcher
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton

from database import bot_db
from keyboards import client_kb


async def hello(message: types.Message):
    await message.reply('Hello World')
    await bot.send_message(message.chat.id,
                           'Hello im your first bot',
                           reply_markup=client_kb.start_markup)


async def help(message: types.Message):
    await bot.send_message(message.chat.id,
                           f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! üòÑüòÑüòÑ\n'
                           f'–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥: \n'
                           f'1. /start –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è üòÑüòÑüòÑ \n'
                           f'2. /help –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π \n'
                           f'3. /task1 –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ (–≤–æ–ø—Ä–æ—Å–∞), '
                           f' –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ç–æ –Ω–∞–¥–∂–∏ –Ω–∞ –∫–Ω–æ–ø—É *–û–¢–í–ï–¢* \n'
                           f'4. /quiz1 –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω,'
                           f' –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–°–ª–µ–¥—É—é—â–∞—è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞* —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å \n'
                           f'5. /Share Location '
                           f'–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ \n'
                           f'6. /Share Info –≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º. \n'
                           f'7. /start_register –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è \n'
                           f'8. /users –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                           reply_markup=client_kb.help_markup
                           )


async def task_1(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_call_answer = InlineKeyboardButton('–û—Ç–≤–µ—Ç', callback_data='button_call_answer')
    markup.add(button_call_answer)
    question = '–°–º–æ–≥ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É?'
    answer = [
        '–î–∞',
        '–ù–µ—Ç',
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answer,
        is_anonymous=False,
        type='quiz',
        correct_option_id=0,
        explanation='–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø—É\!',
        explanation_parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=markup,
    )


async def quiz_1(message: types.Message):
    markup = InlineKeyboardMarkup()
    button_call_1 = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', callback_data='button_call_1')
    markup.add(button_call_1)
    question = '–°–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∏—Ç–æ–Ω'
    answer = [
        '2',
        '4',
        '8',
        '6'
    ]
    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=answer,
        is_anonymous=False,
        type='quiz',
        correct_option_id=2,
        reply_markup=markup,
    )


async def get_all_users(message: types.Message):
    await bot_db.sql_select(message)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(hello, commands=['start'])
    dp.register_message_handler(help, commands=['help'])
    dp.register_message_handler(task_1, commands=['task1'])
    dp.register_message_handler(quiz_1, commands=['quiz1'])
    dp.register_message_handler(get_all_users, commands=['users'])
